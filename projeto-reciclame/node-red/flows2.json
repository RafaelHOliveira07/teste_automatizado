[
    {
        "id": "df28f936a6a13c7d",
        "type": "tab",
        "label": "GRAVAR BANCO",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e9ea3b5072d2ea2e",
        "type": "tab",
        "label": "SIMULAR LIXEIRA",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6e8b44c936e0af80",
        "type": "tab",
        "label": "TOTAL BANCO",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6c35c45af272a7e2",
        "type": "mongodb3",
        "uri": "mongodb+srv://admin:mongo123@cluster0.nq8rdem.mongodb.net/?retryWrites=true&w=majority",
        "name": "reciclame",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "fdc54f4152704ecf",
        "type": "mongodb2",
        "uri": "mongodb+srv://admin:mongo123@cluster0.nq8rdem.mongodb.net/?retryWrites=true&w=majority",
        "name": "",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "7b7e766106b94301",
        "type": "mqtt-broker",
        "name": "",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "858e702760f399af",
        "type": "mongodb3",
        "uri": "mongodb+srv://rafaelh:mongodb123@cluster0.bsuivhm.mongodb.net/?retryWrites=true&w=majority",
        "name": "reciclame",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "01ba2456bca4704a",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6ebb2b92e29e7176",
        "type": "ui_group",
        "name": "graficos",
        "tab": "01ba2456bca4704a",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f6da483921793346",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "53a2442de4ec9cf9",
        "type": "ui_link",
        "name": "Link 2",
        "icon": "open_in_browser",
        "target": "newtab",
        "order": 2
    },
    {
        "id": "89749fb7.87f01",
        "type": "ui_group",
        "name": "Charts",
        "tab": "d7901f40.2659d",
        "order": 2,
        "disp": false,
        "width": "6"
    },
    {
        "id": "ab397e95.29ebe",
        "type": "ui_group",
        "name": "Inputs",
        "tab": "d7901f40.2659d",
        "order": 1,
        "disp": false,
        "width": "6"
    },
    {
        "id": "4e7edda4.417004",
        "type": "ui_group",
        "name": "Group 3",
        "tab": "d7901f40.2659d",
        "order": 3,
        "disp": false,
        "width": "6"
    },
    {
        "id": "d7901f40.2659d",
        "type": "ui_tab",
        "name": "Charts",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "a87ac1bfd3216085",
        "type": "mongodb3",
        "uri": "mongodb+srv://admin:mongo123@cluster0.nq8rdem.mongodb.net/?retryWrites=true&w=majority",
        "name": "",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "962d36ff82c0093b",
        "type": "inject",
        "z": "df28f936a6a13c7d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"idLixeira\":\"02\",\"peso\":\"80\",\"volume\":\"100\",\"material\":\"vidro\"}",
        "payloadType": "json",
        "x": 270,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "b8da728122cc42ef",
        "type": "debug",
        "z": "df28f936a6a13c7d",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1020,
        "wires": []
    },
    {
        "id": "0cc48a554bb92ead",
        "type": "mongodb3 in",
        "z": "df28f936a6a13c7d",
        "service": "_ext_",
        "configNode": "6c35c45af272a7e2",
        "name": "mongoDB",
        "collection": "lixeiras",
        "operation": "insert",
        "x": 560,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "2fc3ec885dc8734f",
        "type": "function",
        "z": "df28f936a6a13c7d",
        "name": "function 2",
        "func": "",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Configurações da lixeira (substitua com seus próprios valores)\nvar idLixeira = \"100\";\nvar intervaloDeTempo = 1000; // Tempo em milissegundos (por exemplo, a cada 5 segundos)\nvar limiteMaximoVolume = 90; // Substitua com o seu limite máximo de volume\nvar limiteMaximoPeso = 10; // Substitua com o seu limite máximo de peso\n\n// Variável para acumular o volume\nvar volumeTotal = 0;\nvar pesoTotal = 0;\n\n// Função para gerar dados simulados\nfunction gerarDadosSimulados() {\n    // Gere dados de volume e peso aleatórios (substitua com a lógica real)\n    var volume = Math.random() * 10; // Valor entre 1 e 10\n    var peso = Math.random() * 1; // Valor entre 1 e 2\n\n    // Verifique se os dados excedem os limites máximos\n    if (volume <= limiteMaximoVolume && peso <= limiteMaximoPeso) {\n        // Some o volume ao total\n        volumeTotal += volume;\n        pesoTotal += peso;\n\n        // Crie o objeto de dados\n        var dados = {\n            idLixeira: idLixeira,\n            volumeTotal: volumeTotal, // Volume acumulado até agora\n            pesoTotal: pesoTotal\n        };\n\n        // Envie os dados para o tópico MQTT\n        node.send({ payload: dados, topic: \"seu/topico/mqtt\" });\n\n        // Se o volume máximo foi atingido, encerre o processo\n        if (volumeTotal >= limiteMaximoVolume) {\n            console.log(\"Volume máximo atingido. Interrompendo o processo.\");\n            return null;\n        }\n    } else {\n        console.log(\"Dados excedem o limite máximo. Não enviando para o MQTT.\");\n    }\n\n    // Agende a próxima geração de dados\n    setTimeout(gerarDadosSimulados, intervaloDeTempo);\n}\n\n// Inicie o processo de geração de dados\ngerarDadosSimulados();\n\nreturn null; // Não envie nada para a saída, pois a execução é controlada internamente\n",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "1b62c701102e4a51",
        "type": "mongodb3 in",
        "z": "df28f936a6a13c7d",
        "service": "_ext_",
        "configNode": "6c35c45af272a7e2",
        "name": "mongoDB",
        "collection": "lixeiras",
        "operation": "insert",
        "x": 660,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "319b05a4d24e0485",
        "type": "inject",
        "z": "df28f936a6a13c7d",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "e8a449c629c7bc69",
        "type": "mqtt out",
        "z": "df28f936a6a13c7d",
        "name": "LIxeira",
        "topic": "lixeira",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7b7e766106b94301",
        "x": 910,
        "y": 1220,
        "wires": [],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "95acf4af18612e5a",
        "type": "function",
        "z": "e9ea3b5072d2ea2e",
        "name": "lixeira1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "var idLixeira = \"01\";\nvar idEmpresa = \"02\";\nvar intervaloDeTempo = 2000; // Tempo em milissegundos (por exemplo, a cada 5 segundos)\nvar limiteMaximoVolume = 90; // Substitua com o seu limite máximo de volume\n\n// Variáveis para acumular o volume e o peso\nvar volumeTotal = 0;\nvar pesoTotal = 0;\n\n// Função para gerar dados simulados\nfunction gerarDadosSimulados() {\n    // Gere dados de volume e peso aleatórios (substitua com a lógica real)\n    var volume = Math.round(Math.random() * 10) + 1; // Valor entre 1 e 10 (arredondado para o inteiro mais próximo)\n    var peso = Math.round(Math.random() * 2) + 1; // Valor entre 1 e 2 (arredondado para o inteiro mais próximo)\n\n    // Adicione um timestamp simulado (data e hora atual)\n    var timestamp = new Date();\n\n    // Verifique se os dados excedem os limites máximos\n    if ((volumeTotal + volume) <= limiteMaximoVolume) {\n        // Some o volume e o peso aos totais\n        volumeTotal += volume;\n        pesoTotal += peso;\n\n        // Crie o objeto de dados\n        var dados = {\n            idLixeira: idLixeira,\n            idEmpresa: idEmpresa,\n            volumeTotal: volumeTotal, // Volume acumulado até agora\n            pesoTotal: pesoTotal, // Peso acumulado até agora\n            timestamp: timestamp, // Adiciona um timestamp simulado\n            isFinal: false // Indica se estes são os últimos dados\n        };\n\n        // Se ambos os limites foram atingidos, marque como final\n        if (volumeTotal >= limiteMaximoVolume - 10) {\n            dados.isFinal = true;\n            console.log(\"Volume máximo atingido. Marcar como final.\");\n        }\n\n        // Envie os dados para o tópico MQTT\n        node.send({ payload: dados, topic: \"lixeira\" });\n        console.log(dados);\n\n        // Se não for o último conjunto de dados, agende a próxima geração\n        if (!dados.isFinal) {\n            setTimeout(gerarDadosSimulados, intervaloDeTempo);\n        }\n    } else {\n        console.log(\"Dados excedem os limites máximos. Não enviando para o MQTT.\");\n    }\n}\n\n// Inicie o processo de geração de dados\ngerarDadosSimulados();\n\nreturn null; // Não envie nada para a saída, pois a execução é controlada internamente\n//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\n",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 360,
        "wires": [
            [
                "04df43854299cb74"
            ]
        ]
    },
    {
        "id": "04df43854299cb74",
        "type": "mongodb3 in",
        "z": "e9ea3b5072d2ea2e",
        "service": "_ext_",
        "configNode": "a87ac1bfd3216085",
        "name": "MongoDb",
        "collection": "lixeiras",
        "operation": "insert",
        "x": 500,
        "y": 360,
        "wires": [
            [
                "c9a95b7e7d285b39"
            ]
        ]
    },
    {
        "id": "c9a95b7e7d285b39",
        "type": "function",
        "z": "e9ea3b5072d2ea2e",
        "name": "function 1",
        "func": "// Supondo que você tenha os dados do MongoDB em msg.payload\nvar mongodbData = msg.payload.ops && msg.payload.ops[0];\n\n// Extrair os valores específicos que você deseja para o gráfico de barras\nvar volumeTotal = mongodbData && mongodbData.volumeTotal || 0;\nvar pesoTotal = mongodbData && mongodbData.pesoTotal || 0;\n\n// Criar um objeto para o gráfico de barras\nvar barChartData = {\n    labels: [\"Volume Total\", \"Peso Total\"],\n    series: ['Series A'],\n    data: [\n        [volumeTotal, pesoTotal]\n    ]\n};\n\n// Enviar os dados para o gráfico de barras\nmsg.payload = [barChartData];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 360,
        "wires": [
            [
                "e8b5e62640975604"
            ]
        ]
    },
    {
        "id": "e8b5e62640975604",
        "type": "ui_chart",
        "z": "e9ea3b5072d2ea2e",
        "name": "",
        "group": "6ebb2b92e29e7176",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "b34817f20f0d4085",
        "type": "function",
        "z": "6e8b44c936e0af80",
        "name": "CRIA ARRAY",
        "func": "// Supondo que você tenha os dados do MongoDB em msg.payload.ops\nvar mongodbData = msg.payload.ops;\n\n// Inicializar variáveis para os totais\nvar pesoTotal = 0;\n\n// Iterar sobre os documentos e somar apenas os finais\nif (Array.isArray(mongodbData)) {\n    mongodbData.forEach(function (doc) {\n        // Verificar se o documento é um total final\n        if (doc.isFinal === true) {\n            // Somar diretamente aos valores dos totaiS\n            pesoTotal += doc.pesoTotal || 0;\n        }\n    });\n}\n\n// Inicializar variável para os dados do gráfico de barras\nvar barChartData = {\n    labels: [\"Peso Total\"],\n    series: ['Series A'],\n    data: [pesoTotal]\n};\n\n// Enviar os dados para o gráfico de barras\nreturn { payload: [barChartData], topic: msg.topic };\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 380,
        "wires": [
            [
                "74e3444455a82649"
            ]
        ]
    },
    {
        "id": "0dab1219b261b27e",
        "type": "mongodb3 in",
        "z": "6e8b44c936e0af80",
        "service": "_ext_",
        "configNode": "6c35c45af272a7e2",
        "name": "for each",
        "collection": "lixeiras",
        "operation": "find.toArray",
        "x": 540,
        "y": 380,
        "wires": [
            [
                "b34817f20f0d4085",
                "bb8e8a5101f52984"
            ]
        ]
    },
    {
        "id": "74e3444455a82649",
        "type": "ui_chart",
        "z": "6e8b44c936e0af80",
        "name": "",
        "group": "6ebb2b92e29e7176",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "horizontalBar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 930,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "4983a2135028ce19",
        "type": "function",
        "z": "6e8b44c936e0af80",
        "name": "CONSULTA BANCO",
        "func": "// Verifica se a mensagem é originária do nó \"inject\"\nif (msg.topic === \"inject\") {\n    // Chama a função de consulta\n    documentos();\n}\n\n// Retorna a mensagem para passar para o próximo nó\nreturn msg;\n\n\nvar processedDocs = [];\n\n// Verifique se a resposta do banco de dados contém a propriedade \"ops\"\nif (msg.payload && msg.payload.ops) {\n    // Extraia os documentos da propriedade \"ops\"\n    var documentos = msg.payload.ops;\n\n    // Itera sobre cada documento\n    documentos.forEach(function(doc) {\n        // Faça qualquer processamento adicional aqui, se necessário\n        // ...\n\n        // Adiciona o documento ao array\n        processedDocs.push(doc);\n    });\n\n    // Imprima os documentos para verificar\n    console.log(processedDocs);\n\n    // Agora, você pode usar o array de documentos como desejar\n    // Por exemplo, atribuir a uma variável global ou enviar para outro nó\n\n    return { payload: processedDocs };\n} else {\n    // Caso não encontre a propriedade \"ops\", algo pode ter dado errado\n    console.error(\"A propriedade 'ops' não encontrada na resposta do banco de dados.\");\n    return msg; // Ou retorne algo apropriado para o seu caso\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 380,
        "wires": [
            [
                "0dab1219b261b27e"
            ]
        ]
    },
    {
        "id": "37eab5048d78bce8",
        "type": "inject",
        "z": "6e8b44c936e0af80",
        "name": "",
        "props": [
            {
                "p": "topic",
                "v": "inject",
                "vt": "msg"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "4983a2135028ce19"
            ]
        ]
    },
    {
        "id": "bb8e8a5101f52984",
        "type": "debug",
        "z": "6e8b44c936e0af80",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 500,
        "wires": []
    }
]